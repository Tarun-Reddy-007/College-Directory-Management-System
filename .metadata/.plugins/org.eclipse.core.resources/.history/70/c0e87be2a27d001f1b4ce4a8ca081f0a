package com.example.collegedirectory.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

import com.example.collegedirectory.entities.Role;
import com.example.collegedirectory.entities.User;
import com.example.collegedirectory.repositories.UserRepository;

@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;

    // Updated method to return User object instead of boolean
    public User authenticate(String username, String password, String role) {
        User user = userRepository.findByUsername(username);
        if (user != null) {
            try {
                // Convert the provided role string to Role enum and check for equality
                Role providedRole = Role.valueOf(role.trim().toUpperCase()); // Convert to upper case for matching
                if (user.getPassword().equals(password) && user.getRole() == providedRole) {
                    return user; // Return user object if authentication is successful
                }
            } catch (IllegalArgumentException e) {
                // Handle invalid role here if necessary (e.g., log it)
            }
        }
        return null; // Return null if user not found or credentials do not match
    }

    public User findByUsername(String username) {
        return userRepository.findByUsername(username);
    }
    
    public User findById(Long id) {
        return userRepository.findById(id).orElse(null);
    }
    
    public User save(User user) {
        return userRepository.save(user);
    }
    
    public User addStudent(User user) {
        user.setRole(Role.STUDENT); // Hardcoded to STUDENT role
        return userRepository.save(user);
    }
    
 // Add this method to UserService
    public List<User> findAllStudents() {
        return userRepository.findAllByRole(Role.STUDENT);
    }
    
    public User updateUser(Long id, User updatedUser) {
        User existingUser = userRepository.findById(id).orElse(null);
        if (existingUser != null) {
            // Update the fields you want to change
            existingUser.setUsername(updatedUser.getUsername());
            existingUser.setEmail(updatedUser.getEmail());
            existingUser.setPhone(updatedUser.getPhone());  // Assuming there's a phone field
            existingUser.setPassword(updatedUser.getPassword());  // Only if you're allowing password updates
            // Don't update the role unless intended
            return userRepository.save(existingUser);  // Save changes to the repository
        }
        return null;  // User not found, handle as necessary
    }


    public boolean deleteUser(Long id) {
        if (userRepository.existsById(id)) {
            userRepository.deleteById(id);
            return true; // Deletion successful
        }
        return false; // User not found
    }
}
