package com.example.collegedirectory.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.example.collegedirectory.entities.Course;
import com.example.collegedirectory.entities.Department;
import com.example.collegedirectory.entities.FacultyProfile;
import com.example.collegedirectory.repositories.CourseRepository;
import com.example.collegedirectory.repositories.DepartmentRepository;
import com.example.collegedirectory.repositories.FacultyProfileRepository;

import java.util.List;

@Service
public class CourseService {
    @Autowired
    private CourseRepository courseRepository;
    
    @Autowired
    private DepartmentRepository departmentRepository;

    @Autowired
    private FacultyProfileRepository facultyProfileRepository;

    public List<Course> getAllCourses() {
        List<Course> courses = courseRepository.findAll();
        
        for (Course course : courses) {
            // Assuming you have a method to find faculty by ID
            Faculty faculty = facultyRepository.findById(course.getFacultyId()).orElse(null);
            if (faculty != null) {
                course.setFacultyName(faculty.getName()); // Assuming getName() returns the faculty's name
            }
            
            if (course.getDepartment() != null) {
                course.setDepartmentName(course.getDepartment().getName()); // Assuming Department has a getName() method
            }
        }
        
        return courses;
    }


    public Course addCourse(String title, String description, Long facultyId, String departmentName) {
        System.out.println("Department Name Received: " + departmentName); // Debug line

        Department department = departmentRepository.findByName(departmentName);
        if (department == null) {
            throw new IllegalArgumentException("Department not found: " + departmentName);
        }

        // Create a new Course object and set its fields
        Course course = new Course();
        course.setTitle(title);
        course.setDescription(description);
        course.setDepartment(department); // Set the fetched department
        course.setFacultyId(facultyId); // Directly set the facultyId

        // Save the course to the database
        return courseRepository.save(course);
    }
    
    // Method to save a course
    public void save(Course course) {
        courseRepository.save(course); // Save the course to the database
    }
}
