package com.example.collegedirectory.entities;

import jakarta.persistence.*;

@Entity
@Table(name = "Users") 
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String username;

    @Column(nullable = false)
    private String password;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private Role role;

    private String name;
    private String email;
    private String phone;

    // Getters and Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Role getRole() {
        return role;
    }

    public void setRole(Role role) {
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }
    
    @OneToOne(mappedBy = "user", fetch = FetchType.EAGER)  // Eager fetch ensures the profile is loaded with the user
    private StudentProfile studentProfile;

 // Getters and setters for transient fields
    public String getStudentDepartment() {
        if (this.studentProfile != null && this.studentProfile.getDepartment() != null) {
            return this.studentProfile.getDepartment().getName();
        }
        return null;
    }

    public String getYear() {
        if (this.studentProfile != null) {
            return this.studentProfile.getYear();
        }
        return null;
    }
    
    @OneToOne(mappedBy = "user", fetch = FetchType.EAGER)  // Eager fetch ensures the profile is loaded with the user
    private FacultyProfile facultyProfile;
    
    public String getFacultyDepartment() {
        if (this.facultyProfile != null && this.facultyProfile.getDepartment() != null) {
            return this.facultyProfile.getDepartment().getName();
        }
        return null;
    }

    public String getOfficeHours() {
        if (this.facultyProfile != null) {
            return this.facultyProfile.getOfficeHours();
        }
        return null;
    }

}
