package com.example.collegedirectory.controllers;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.example.collegedirectory.entities.Role;
import com.example.collegedirectory.entities.User;
import com.example.collegedirectory.services.UserService;

@RestController
@RequestMapping("/api/users")
public class UserController {
    @Autowired
    private UserService userService;

    @PostMapping("/login")
    public ResponseEntity<Map<String, Object>> login(@RequestBody Map<String, String> credentials) {
        String username = credentials.get("username");
        String password = credentials.get("password");
        String role = credentials.get("role");
        
        // Call the updated authenticate method
        User user = userService.authenticate(username, password, role); 
        
        if (user != null) {
            // If user is authenticated, return the user ID along with a success message
            return ResponseEntity.ok(Map.of(
                "message", "Login successful",
                "userId", user.getId() // Assuming User has a getId() method
            ));
        } else {
            return ResponseEntity.status(401).body(Map.of("message", "Invalid username, password, or role"));
        }
    }
    
    @GetMapping("/username/{username}")
    public ResponseEntity<User> getUserDetailsByUsername(@PathVariable String username) {
        User user = userService.findByUsername(username);
        if (user != null) {
            return ResponseEntity.ok(user);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    
    @GetMapping("/getid/{id}")
    public ResponseEntity<User> getUserDetailsById(@PathVariable Long id) {
        User user = userService.findById(id);
        if (user != null) {
            return ResponseEntity.ok(user);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    @PutMapping("/updateid/{id}")
    public ResponseEntity<User> updateUserDetails(@PathVariable Long id, @RequestBody User updatedUser) {
        User user = userService.findById(id);
        if (user != null) {
            user.setUsername(updatedUser.getUsername());
            user.setEmail(updatedUser.getEmail());
            user.setRole(updatedUser.getRole());
            userService.save(user); // Make sure the UserService has a save method to update the user in the database
            return ResponseEntity.ok(user);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    @PostMapping("/addstudent")
    public ResponseEntity<User> addStudent(@RequestBody User newUser) {
    	try {
    	    User savedUser = userService.addStudent(newUser);
    	    return ResponseEntity.status(201).body(savedUser);
    	} catch (Exception e) {
    	    e.printStackTrace();
    	    return ResponseEntity.status(500).body(null);
    	}
    }
    @GetMapping("/getallstudents")
    public ResponseEntity<List<User>> getAllStudents() {
        List<User> students = userService.findAllStudents();
        return ResponseEntity.ok(students);
    }
    
    @PutMapping("/updatestudent/{id}")
    public ResponseEntity<User> updateStudent(@PathVariable Long id, @RequestBody User updatedUser) {
        User user = userService.updateUser(id, updatedUser);
        if (user != null) {
            return ResponseEntity.ok(user);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    // Delete a student
    @DeleteMapping("/deletestudent/{id}")
    public ResponseEntity<Map<String, String>> deleteStudent(@PathVariable Long id) {
        boolean isDeleted = userService.deleteUser(id);
        if (isDeleted) {
            return ResponseEntity.ok(Map.of("message", "Student deleted successfully"));
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    
    @PutMapping("/updatestudent/{id}")
    public ResponseEntity<User> updateFaculty(@PathVariable Long id, @RequestBody User updatedUser) {
        User user = userService.updateUser(id, updatedUser);
        if (user != null) {
            return ResponseEntity.ok(user);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}
